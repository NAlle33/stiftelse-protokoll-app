/**
 * Import Update Script - Service Layer BaseService Migration
 * 
 * Detta script uppdaterar alla import statements f√∂r att anv√§nda migrerade
 * BaseService-tj√§nster ist√§llet f√∂r legacy-implementationer. Anv√§nder
 * ServiceFactory f√∂r conditional loading baserat p√• feature flags.
 * 
 * F√∂ljer GDPR-efterlevnad och svensk lokalisering.
 */

import * as fs from 'fs';
import * as path from 'path';

interface ImportUpdate {
  filePath: string;
  oldImport: string;
  newImport: string;
  description: string;
}

/**
 * Lista √∂ver import-uppdateringar som beh√∂ver g√∂ras
 */
const IMPORT_UPDATES: ImportUpdate[] = [
  // WebRTC Signaling Service Updates
  {
    filePath: 'src/components/VideoMeeting/VideoMeetingRoom.tsx',
    oldImport: "import { webrtcSignalingService } from '../../services/webrtcSignalingService';",
    newImport: "import { ServiceFactory } from '../../services/ServiceFactory';",
    description: 'Uppdatera VideoMeetingRoom f√∂r att anv√§nda ServiceFactory'
  },
  {
    filePath: 'src/services/webrtcPeerService.ts',
    oldImport: "import { webrtcSignalingService, RTCSignal } from './webrtcSignalingService';",
    newImport: "import { ServiceFactory } from './ServiceFactory';\nimport { RTCSignal } from './webrtcSignalingService';",
    description: 'Uppdatera webrtcPeerService f√∂r att anv√§nda ServiceFactory'
  },
  
  // Video Meeting Service Updates
  {
    filePath: 'src/services/videoMeetingService.ts',
    oldImport: "import { webrtcSignalingService } from './webrtcSignalingService';",
    newImport: "import { ServiceFactory } from './ServiceFactory';",
    description: 'Uppdatera videoMeetingService f√∂r att anv√§nda ServiceFactory'
  },
  
  // Backup service updates (f√∂r legacy-filer som fortfarande refererar)
  {
    filePath: 'backup/services/videoMeetingService.legacy.ts',
    oldImport: "import { webrtcSignalingService } from './webrtcSignalingService';",
    newImport: "// Legacy import - anv√§nd ServiceFactory i nya implementationer\n// import { ServiceFactory } from './ServiceFactory';",
    description: 'Kommentera legacy imports i backup-filer'
  }
];

/**
 * Kod-uppdateringar f√∂r att anv√§nda ServiceFactory ist√§llet f√∂r direkta service-instanser
 */
const CODE_UPDATES: Array<{
  filePath: string;
  oldCode: string;
  newCode: string;
  description: string;
}> = [
  // WebRTC Peer Service - uppdatera f√∂r att anv√§nda ServiceFactory
  {
    filePath: 'src/services/webrtcPeerService.ts',
    oldCode: 'webrtcSignalingService.setCallbacks({',
    newCode: `// H√§mta WebRTC Signaling Service via ServiceFactory
    const signalingResult = await ServiceFactory.getWebRTCSignalingService();
    const webrtcSignalingService = signalingResult.service;
    
    webrtcSignalingService.setCallbacks({`,
    description: 'Anv√§nd ServiceFactory f√∂r att h√§mta WebRTC Signaling Service'
  },
  {
    filePath: 'src/services/webrtcPeerService.ts',
    oldCode: 'await webrtcSignalingService.sendSignal(this.roomId!, {',
    newCode: `// H√§mta WebRTC Signaling Service via ServiceFactory
    const signalingResult = await ServiceFactory.getWebRTCSignalingService();
    const webrtcSignalingService = signalingResult.service;
    
    await webrtcSignalingService.sendSignal(this.roomId!, {`,
    description: 'Anv√§nd ServiceFactory f√∂r sendSignal-anrop'
  }
];

/**
 * Utf√∂r import-uppdateringar
 */
async function updateImports(): Promise<void> {
  console.log('üîÑ Startar import-uppdateringar f√∂r Service Layer BaseService Migration...');
  
  let updatedFiles = 0;
  let errors = 0;

  for (const update of IMPORT_UPDATES) {
    try {
      const fullPath = path.resolve(process.cwd(), update.filePath);
      
      // Kontrollera om filen existerar
      if (!fs.existsSync(fullPath)) {
        console.log(`‚ö†Ô∏è  Fil existerar inte: ${update.filePath}`);
        continue;
      }

      // L√§s filinneh√•ll
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // Kontrollera om uppdatering beh√∂vs
      if (!content.includes(update.oldImport)) {
        console.log(`‚ÑπÔ∏è  Ingen uppdatering beh√∂vs: ${update.filePath}`);
        continue;
      }

      // Utf√∂r uppdatering
      const updatedContent = content.replace(update.oldImport, update.newImport);
      
      // Skriv tillbaka till fil
      fs.writeFileSync(fullPath, updatedContent, 'utf8');
      
      console.log(`‚úÖ Uppdaterad: ${update.filePath}`);
      console.log(`   ${update.description}`);
      updatedFiles++;
      
    } catch (error) {
      console.error(`‚ùå Fel vid uppdatering av ${update.filePath}:`, error);
      errors++;
    }
  }

  console.log(`\nüìä Import-uppdateringar slutf√∂rda:`);
  console.log(`   ‚úÖ Uppdaterade filer: ${updatedFiles}`);
  console.log(`   ‚ùå Fel: ${errors}`);
}

/**
 * Utf√∂r kod-uppdateringar
 */
async function updateCode(): Promise<void> {
  console.log('\nüîÑ Startar kod-uppdateringar f√∂r ServiceFactory-anv√§ndning...');
  
  let updatedFiles = 0;
  let errors = 0;

  for (const update of CODE_UPDATES) {
    try {
      const fullPath = path.resolve(process.cwd(), update.filePath);
      
      // Kontrollera om filen existerar
      if (!fs.existsSync(fullPath)) {
        console.log(`‚ö†Ô∏è  Fil existerar inte: ${update.filePath}`);
        continue;
      }

      // L√§s filinneh√•ll
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // Kontrollera om uppdatering beh√∂vs
      if (!content.includes(update.oldCode)) {
        console.log(`‚ÑπÔ∏è  Ingen kod-uppdatering beh√∂vs: ${update.filePath}`);
        continue;
      }

      // Utf√∂r uppdatering
      const updatedContent = content.replace(update.oldCode, update.newCode);
      
      // Skriv tillbaka till fil
      fs.writeFileSync(fullPath, updatedContent, 'utf8');
      
      console.log(`‚úÖ Kod uppdaterad: ${update.filePath}`);
      console.log(`   ${update.description}`);
      updatedFiles++;
      
    } catch (error) {
      console.error(`‚ùå Fel vid kod-uppdatering av ${update.filePath}:`, error);
      errors++;
    }
  }

  console.log(`\nüìä Kod-uppdateringar slutf√∂rda:`);
  console.log(`   ‚úÖ Uppdaterade filer: ${updatedFiles}`);
  console.log(`   ‚ùå Fel: ${errors}`);
}

/**
 * Skapar backup av filer innan uppdatering
 */
async function createBackups(): Promise<void> {
  console.log('üíæ Skapar s√§kerhetskopior innan uppdatering...');
  
  const filesToBackup = [
    ...IMPORT_UPDATES.map(u => u.filePath),
    ...CODE_UPDATES.map(u => u.filePath)
  ];
  
  const uniqueFiles = [...new Set(filesToBackup)];
  
  for (const filePath of uniqueFiles) {
    try {
      const fullPath = path.resolve(process.cwd(), filePath);
      
      if (!fs.existsSync(fullPath)) {
        continue;
      }
      
      const backupPath = `${fullPath}.backup.${Date.now()}`;
      fs.copyFileSync(fullPath, backupPath);
      
      console.log(`üíæ Backup skapad: ${backupPath}`);
    } catch (error) {
      console.error(`‚ùå Fel vid backup av ${filePath}:`, error);
    }
  }
}

/**
 * Validerar att uppdateringarna √§r korrekta
 */
async function validateUpdates(): Promise<void> {
  console.log('\nüîç Validerar uppdateringar...');
  
  const filesToValidate = [
    ...IMPORT_UPDATES.map(u => u.filePath),
    ...CODE_UPDATES.map(u => u.filePath)
  ];
  
  const uniqueFiles = [...new Set(filesToValidate)];
  
  for (const filePath of uniqueFiles) {
    try {
      const fullPath = path.resolve(process.cwd(), filePath);
      
      if (!fs.existsSync(fullPath)) {
        continue;
      }
      
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // Kontrollera att ServiceFactory importeras om det anv√§nds
      if (content.includes('ServiceFactory.get') && !content.includes("import { ServiceFactory }")) {
        console.warn(`‚ö†Ô∏è  ${filePath}: Anv√§nder ServiceFactory men saknar import`);
      }
      
      // Kontrollera att inga gamla imports finns kvar
      const oldImports = [
        "from './userService'",
        "from './videoMeetingService'",
        "from './webrtcSignalingService'"
      ];
      
      for (const oldImport of oldImports) {
        if (content.includes(oldImport) && !filePath.includes('backup/')) {
          console.warn(`‚ö†Ô∏è  ${filePath}: Inneh√•ller fortfarande legacy import: ${oldImport}`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Fel vid validering av ${filePath}:`, error);
    }
  }
  
  console.log('‚úÖ Validering slutf√∂rd');
}

/**
 * Huvudfunktion
 */
async function main(): Promise<void> {
  console.log('üöÄ Service Layer BaseService Migration - Import Update Script');
  console.log('====================================================================');
  
  try {
    // Skapa backups
    await createBackups();
    
    // Uppdatera imports
    await updateImports();
    
    // Uppdatera kod
    await updateCode();
    
    // Validera uppdateringar
    await validateUpdates();
    
    console.log('\nüéâ Import-uppdateringar slutf√∂rda framg√•ngsrikt!');
    console.log('\nüìã N√§sta steg:');
    console.log('1. K√∂r tester f√∂r att verifiera att allt fungerar: npm test');
    console.log('2. Kontrollera att feature flags √§r korrekt konfigurerade');
    console.log('3. Testa applikationen i utvecklingsmilj√∂');
    console.log('4. Efter framg√•ngsrik testning, ta bort legacy-filer');
    
  } catch (error) {
    console.error('üí• Fel vid import-uppdateringar:', error);
    process.exit(1);
  }
}

// K√∂r script om det anropas direkt
if (require.main === module) {
  main();
}

export { updateImports, updateCode, validateUpdates };
