/**
 * Comprehensive Business Flow Integration Tests
 * Swedish Board Meeting App - Critical Business Logic Testing
 * 
 * Tests complete end-to-end business flows including:
 * - Meeting creation and management
 * - Protocol generation with AI
 * - BankID signing workflows
 * - GDPR compliance flows
 * - Swedish localization
 */

import React from 'react';
import { act, waitFor } from '@testing-library/react-native';
import { Alert } from 'react-native';

// Mock all external dependencies
jest.mock('../src/services/meetingService');
jest.mock('../src/services/aiProtocolService');
jest.mock('../src/services/bankidService');
jest.mock('../src/services/signatureService');
jest.mock('../src/services/auditService');
jest.mock('../src/hooks/useBankID');
jest.mock('../src/hooks/useGDPRConsent');
jest.mock('../src/hooks/useNotifications');
jest.mock('expo-secure-store');

// Import services and hooks
import { meetingService } from '../src/services/meetingService';
import { aiProtocolService } from '../src/services/aiProtocolService';
import { bankidService } from '../src/services/bankidService';
import { signatureService } from '../src/services/signatureService';
import { auditService } from '../src/services/auditService';

describe('üéØ Comprehensive Business Flow Integration Tests', () => {
  // Mock data for Swedish board meeting scenarios
  const mockUser = {
    id: 'user-123',
    email: 'anna.andersson@example.se',
    fullName: 'Anna Andersson',
    role: 'board_member' as const,
    organizationId: 'org-456'
  };

  const mockMeeting = {
    id: 'meeting-789',
    title: 'Styrelsem√∂te Q4 2024',
    description: 'Kvartalsm√∂te f√∂r fj√§rde kvartalet',
    scheduledAt: '2024-12-15T14:00:00Z',
    organizationId: 'org-456',
    createdBy: 'user-123',
    status: 'scheduled' as const,
    participants: [mockUser.id],
    location: 'Stockholm, Sverige',
    agenda: [
      'Genomg√•ng av kvartalssiffror',
      'Budget f√∂r n√§sta √•r',
      'Personalfr√•gor'
    ]
  };

  const mockProtocol = {
    id: 'protocol-101',
    meetingId: 'meeting-789',
    content: 'Protokoll fr√•n styrelsem√∂te...',
    version: 1,
    status: 'draft' as const,
    createdBy: 'user-123',
    createdAt: '2024-12-15T16:00:00Z',
    signatures: []
  };

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Setup default mocks
    (meetingService.createMeeting as jest.Mock).mockResolvedValue(mockMeeting);
    (meetingService.getMeeting as jest.Mock).mockResolvedValue(mockMeeting);
    (aiProtocolService.generateProtocol as jest.Mock).mockResolvedValue(mockProtocol);
    (bankidService.initiateAuth as jest.Mock).mockResolvedValue({ orderRef: 'order-123' });
    (bankidService.collectAuth as jest.Mock).mockResolvedValue({ 
      status: 'complete',
      user: mockUser 
    });
    (signatureService.createSignatureRequest as jest.Mock).mockResolvedValue({
      id: 'sig-request-456',
      status: 'pending'
    });
    (auditService.logAction as jest.Mock).mockResolvedValue(true);
  });

  describe('üè¢ Complete Meeting Lifecycle Flow', () => {
    it('should handle complete meeting creation to protocol signing flow', async () => {
      // Phase 1: Meeting Creation
      console.log('üöÄ Starting complete meeting lifecycle test...');
      
      const meetingData = {
        title: '√Örsst√§mma 2024',
        description: '√Örlig bolagsst√§mma enligt svensk aktiebolagsr√§tt',
        scheduledAt: '2024-12-20T10:00:00Z',
        participants: [mockUser.id],
        agenda: [
          'Fastst√§llande av r√∂stl√§ngd',
          'Val av ordf√∂rande och sekreterare',
          'Godk√§nnande av dagordning',
          'Framl√§ggande av √•rsredovisning',
          'Beslut om resultatdisposition'
        ]
      };

      // Create meeting
      const createdMeeting = await meetingService.createMeeting(meetingData);
      expect(createdMeeting).toBeDefined();
      expect(createdMeeting.title).toBe(meetingData.title);
      expect(meetingService.createMeeting).toHaveBeenCalledWith(meetingData);

      // Phase 2: Meeting Execution (simulated)
      console.log('üìù Simulating meeting execution...');
      
      // Update meeting status to in_progress
      const updatedMeeting = { ...createdMeeting, status: 'in_progress' as const };
      (meetingService.getMeeting as jest.Mock).mockResolvedValue(updatedMeeting);

      // Phase 3: AI Protocol Generation
      console.log('ü§ñ Generating AI protocol...');
      
      const protocolData = {
        meetingId: createdMeeting.id,
        transcription: 'M√∂tet √∂ppnades av ordf√∂randen Anna Andersson...',
        participants: [mockUser],
        decisions: [
          'Beslut om godk√§nnande av √•rsredovisning',
          'Beslut om vinstutdelning p√• 5 kr per aktie'
        ]
      };

      const generatedProtocol = await aiProtocolService.generateProtocol(protocolData);
      expect(generatedProtocol).toBeDefined();
      expect(generatedProtocol.meetingId).toBe(createdMeeting.id);
      expect(aiProtocolService.generateProtocol).toHaveBeenCalledWith(protocolData);

      // Phase 4: BankID Authentication for Signing
      console.log('üîê Initiating BankID authentication...');
      
      const authResult = await bankidService.initiateAuth({
        personalNumber: '198001011234',
        endUserIp: '192.168.1.1'
      });
      expect(authResult.orderRef).toBe('order-123');

      // Collect authentication result
      const collectResult = await bankidService.collectAuth(authResult.orderRef);
      expect(collectResult.status).toBe('complete');
      expect(collectResult.user).toEqual(mockUser);

      // Phase 5: Digital Signature Creation
      console.log('‚úçÔ∏è Creating digital signature...');
      
      const signatureRequest = await signatureService.createSignatureRequest({
        protocolId: generatedProtocol.id,
        signerId: mockUser.id,
        documentHash: 'sha256-hash-of-protocol'
      });
      expect(signatureRequest.status).toBe('pending');

      // Phase 6: Audit Trail Verification
      console.log('üìã Verifying audit trail...');
      
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'CREATE',
        'meeting',
        createdMeeting.id,
        expect.objectContaining({
          title: meetingData.title,
          swedish_compliance: true
        })
      );

      console.log('‚úÖ Complete meeting lifecycle test completed successfully!');
    });

    it('should handle meeting cancellation with proper GDPR data cleanup', async () => {
      console.log('üö´ Testing meeting cancellation with GDPR compliance...');
      
      // Create meeting first
      const meeting = await meetingService.createMeeting(mockMeeting);
      
      // Cancel meeting
      (meetingService.cancelMeeting as jest.Mock).mockResolvedValue({
        ...meeting,
        status: 'cancelled',
        cancellationReason: 'Otillr√§ckligt antal deltagare'
      });

      const cancelledMeeting = await meetingService.cancelMeeting(meeting.id, {
        reason: 'Otillr√§ckligt antal deltagare',
        gdprDataCleanup: true
      });

      expect(cancelledMeeting.status).toBe('cancelled');
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'CANCEL',
        'meeting',
        meeting.id,
        expect.objectContaining({
          gdpr_cleanup: true,
          reason: 'Otillr√§ckligt antal deltagare'
        })
      );
    });
  });

  describe('ü§ñ AI Protocol Generation Flow', () => {
    it('should generate protocol with Swedish legal compliance', async () => {
      console.log('üìÑ Testing AI protocol generation with Swedish compliance...');
      
      const transcriptionData = {
        meetingId: mockMeeting.id,
        transcription: `
          Ordf√∂randen Anna Andersson √∂ppnade m√∂tet kl. 14:00.
          N√§rvarande: Anna Andersson, Erik Johansson, Maria Lindstr√∂m.
          Dagordning godk√§ndes enh√§lligt.
          
          Punkt 1: Genomg√•ng av kvartalssiffror
          CFO presenterade Q4-siffror. Oms√§ttning √∂kade med 15%.
          
          Punkt 2: Budget f√∂r n√§sta √•r
          F√∂rslag p√• budget f√∂r 2025 presenterades.
          Beslut: Budget godk√§nns med √§ndringar enligt bilaga A.
          
          M√∂tet avslutades kl. 16:30.
        `,
        participants: [mockUser],
        swedishLegalCompliance: true
      };

      const protocol = await aiProtocolService.generateProtocol(transcriptionData);
      
      expect(protocol).toBeDefined();
      expect(protocol.content).toContain('Ordf√∂randen');
      expect(protocol.content).toContain('Beslut:');
      expect(aiProtocolService.generateProtocol).toHaveBeenCalledWith(
        expect.objectContaining({
          swedishLegalCompliance: true
        })
      );

      // Verify audit logging
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'GENERATE',
        'protocol',
        protocol.id,
        expect.objectContaining({
          ai_generated: true,
          swedish_compliance: true
        })
      );
    });

    it('should handle AI generation errors gracefully', async () => {
      console.log('‚ö†Ô∏è Testing AI generation error handling...');
      
      (aiProtocolService.generateProtocol as jest.Mock).mockRejectedValue(
        new Error('AI service temporarily unavailable')
      );

      await expect(aiProtocolService.generateProtocol({
        meetingId: mockMeeting.id,
        transcription: 'Test transcription'
      })).rejects.toThrow('AI service temporarily unavailable');

      // Should log error for audit
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'ERROR',
        'protocol',
        mockMeeting.id,
        expect.objectContaining({
          error: 'AI service temporarily unavailable',
          action: 'generate_protocol'
        })
      );
    });
  });

  describe('üîê BankID Integration Flow', () => {
    it('should handle complete BankID authentication and signing flow', async () => {
      console.log('üá∏üá™ Testing complete BankID flow...');
      
      // Phase 1: Initiate BankID authentication
      const authRequest = {
        personalNumber: '198001011234',
        endUserIp: '192.168.1.100',
        requirement: {
          allowFingerprint: true,
          certificatePolicies: ['1.2.752.78.1.5']
        }
      };

      const authResult = await bankidService.initiateAuth(authRequest);
      expect(authResult.orderRef).toBeDefined();

      // Phase 2: Simulate user completing BankID on mobile
      (bankidService.collectAuth as jest.Mock)
        .mockResolvedValueOnce({ status: 'pending', hintCode: 'outstandingTransaction' })
        .mockResolvedValueOnce({ status: 'pending', hintCode: 'userSign' })
        .mockResolvedValueOnce({ 
          status: 'complete',
          user: {
            ...mockUser,
            personalNumber: '198001011234',
            name: 'Anna Andersson',
            givenName: 'Anna',
            surname: 'Andersson'
          },
          signature: 'base64-encoded-signature',
          ocspResponse: 'base64-encoded-ocsp'
        });

      // Poll for completion
      let collectResult;
      let attempts = 0;
      do {
        collectResult = await bankidService.collectAuth(authResult.orderRef);
        attempts++;
      } while (collectResult.status === 'pending' && attempts < 3);

      expect(collectResult.status).toBe('complete');
      expect(collectResult.user.personalNumber).toBe('198001011234');

      // Phase 3: Create signature request after successful auth
      const signatureRequest = await signatureService.createSignatureRequest({
        protocolId: mockProtocol.id,
        signerId: collectResult.user.id,
        bankidOrderRef: authResult.orderRef,
        documentHash: 'sha256-protocol-hash'
      });

      expect(signatureRequest).toBeDefined();
      expect(signatureRequest.status).toBe('pending');

      // Verify audit trail for BankID flow
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'BANKID_AUTH',
        'user',
        mockUser.id,
        expect.objectContaining({
          personal_number: '198001011234',
          success: true,
          swedish_bankid: true
        })
      );
    });

    it('should handle BankID authentication failures', async () => {
      console.log('‚ùå Testing BankID authentication failures...');
      
      (bankidService.collectAuth as jest.Mock).mockResolvedValue({
        status: 'failed',
        hintCode: 'userCancel'
      });

      const authResult = await bankidService.initiateAuth({
        personalNumber: '198001011234',
        endUserIp: '192.168.1.100'
      });

      const collectResult = await bankidService.collectAuth(authResult.orderRef);
      expect(collectResult.status).toBe('failed');
      expect(collectResult.hintCode).toBe('userCancel');

      // Should log failure
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'BANKID_FAILED',
        'user',
        mockUser.id,
        expect.objectContaining({
          hint_code: 'userCancel',
          reason: 'User cancelled authentication'
        })
      );
    });
  });

  describe('üõ°Ô∏è GDPR Compliance Flow', () => {
    it('should handle complete GDPR consent and data management flow', async () => {
      console.log('üîí Testing GDPR compliance flow...');
      
      // Phase 1: GDPR consent collection
      const consentData = {
        userId: mockUser.id,
        consentTypes: ['data_processing', 'marketing', 'analytics'],
        consentVersion: '2024-12-01',
        ipAddress: '192.168.1.100',
        userAgent: 'SokaApp/1.0.0 iOS/17.0'
      };

      (auditService.logAction as jest.Mock).mockResolvedValue(true);

      // Log consent
      await auditService.logAction(
        mockUser.id,
        'GDPR_CONSENT',
        'user',
        mockUser.id,
        consentData
      );

      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'GDPR_CONSENT',
        'user',
        mockUser.id,
        expect.objectContaining({
          consentTypes: ['data_processing', 'marketing', 'analytics'],
          consentVersion: '2024-12-01',
          swedish_gdpr: true
        })
      );

      // Phase 2: Data export request (Right to portability)
      const exportRequest = {
        userId: mockUser.id,
        dataTypes: ['meetings', 'protocols', 'signatures'],
        format: 'json',
        includeMetadata: true
      };

      // Mock data export service
      const mockExportData = {
        user: mockUser,
        meetings: [mockMeeting],
        protocols: [mockProtocol],
        exportDate: new Date().toISOString(),
        gdprCompliant: true
      };

      // Simulate data export
      await auditService.logAction(
        mockUser.id,
        'DATA_EXPORT',
        'user',
        mockUser.id,
        {
          ...exportRequest,
          exportSize: JSON.stringify(mockExportData).length,
          swedish_gdpr: true
        }
      );

      // Phase 3: Data deletion request (Right to be forgotten)
      const deletionRequest = {
        userId: mockUser.id,
        reason: 'User requested account deletion',
        retainLegalData: true, // Keep legally required data per Swedish law
        anonymizeData: true
      };

      await auditService.logAction(
        mockUser.id,
        'DATA_DELETION',
        'user',
        mockUser.id,
        deletionRequest
      );

      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'DATA_DELETION',
        'user',
        mockUser.id,
        expect.objectContaining({
          retainLegalData: true,
          anonymizeData: true,
          swedish_law_compliance: true
        })
      );
    });
  });

  describe('üåê Swedish Localization Integration', () => {
    it('should handle Swedish characters and formatting throughout the flow', async () => {
      console.log('üá∏üá™ Testing Swedish localization integration...');
      
      const swedishMeetingData = {
        title: '√Örsst√§mma f√∂r √Öklagarmyndigheten i G√∂teborg',
        description: 'Diskussion om f√∂r√§ndringar i organisationen',
        location: 'G√∂teborg, V√§stra G√∂talands l√§n',
        participants: [
          { name: '√Ösa √ñberg', email: 'asa.oberg@example.se' },
          { name: 'Erik √Öngstr√∂m', email: 'erik.angstrom@example.se' }
        ],
        agenda: [
          '√ñppnande av m√∂tet',
          'Fastst√§llande av r√∂stl√§ngd',
          'Genomg√•ng av f√∂reg√•ende √•rs verksamhet',
          'Beslut om √§ndringar i stadgarna'
        ]
      };

      // Create meeting with Swedish content
      (meetingService.createMeeting as jest.Mock).mockResolvedValue({
        ...mockMeeting,
        ...swedishMeetingData,
        id: 'swedish-meeting-123'
      });

      const swedishMeeting = await meetingService.createMeeting(swedishMeetingData);
      
      expect(swedishMeeting.title).toContain('√Öklagarmyndigheten');
      expect(swedishMeeting.location).toContain('G√∂teborg');
      expect(swedishMeeting.agenda).toContain('√ñppnande av m√∂tet');

      // Generate protocol with Swedish content
      const swedishProtocolData = {
        meetingId: swedishMeeting.id,
        transcription: `
          Ordf√∂randen √Ösa √ñberg √∂ppnade √•rsst√§mman kl. 10:00.
          N√§rvarande: √Ösa √ñberg, Erik √Öngstr√∂m.
          
          ¬ß 1 √ñppnande av m√∂tet
          Ordf√∂randen h√§lsade v√§lkommen och konstaterade att m√∂tet var beh√∂rigt sammankallat.
          
          ¬ß 2 Fastst√§llande av r√∂stl√§ngd
          R√∂stl√§ngden fastst√§lldes till 2 personer med totalt 100 r√∂ster.
          
          ¬ß 3 Genomg√•ng av f√∂reg√•ende √•rs verksamhet
          VD presenterade verksamhetsber√§ttelsen f√∂r f√∂reg√•ende √•r.
          
          Beslut: Verksamhetsber√§ttelsen godk√§nns.
          
          M√∂tet avslutades kl. 12:00.
        `,
        swedishLegalFormat: true,
        participants: swedishMeetingData.participants
      };

      const swedishProtocol = await aiProtocolService.generateProtocol(swedishProtocolData);
      
      expect(swedishProtocol.content).toContain('√Ösa √ñberg');
      expect(swedishProtocol.content).toContain('¬ß 1');
      expect(swedishProtocol.content).toContain('Beslut:');

      // Verify Swedish formatting in audit logs
      expect(auditService.logAction).toHaveBeenCalledWith(
        mockUser.id,
        'CREATE',
        'meeting',
        swedishMeeting.id,
        expect.objectContaining({
          swedish_content: true,
          character_encoding: 'UTF-8',
          locale: 'sv-SE'
        })
      );
    });
  });
});
